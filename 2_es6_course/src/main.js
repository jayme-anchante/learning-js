// # 1. Concepts

// ## 4. Classes

class List {
  constructor() {
    this.data = [];
  }
  add(data) {
    this.data.push(data);
    console.log(this.data);
  }
}

class todoList extends List {
  constructor() {
    super();
    this.user = "Jayme"
  }
  showUser() {
    console.log(this.user);
  }
  static myStaticMethod() {
    return "staticSomething"
  }
}

const myList = new todoList();

document.getElementById("newTodo").onclick = function() {
  myList.add("New todo");
}

myList.showUser();

// ## 5. var VS const VS let

const immutableConst = {"name": "Jayme"};
// attribute a new value to the const is not possible
// immutableConst = 2;
// However, we can mute values without changing the general structure
immutableConst["name"] = "John";
console.log(immutableConst);

// variables declared with var keyword are scoped to the function
// variables declared with let are scoped to the immediate enclosing block {}
// example below:
function test(x) {
  let y = 2;
  if (x > 5) {
    console.log(x, y);
  }
}
test(10)

// ## 6. Array operations

const arr = [1,2,3,4,5];

// map function
const newArr = arr.map(function(item, index) {
  return item * index;
});
console.log(newArr);

// reduce function
const sum = arr.reduce(function(total, next) {
  return total + next;
});
console.log(sum);

// filter function
const filter = arr.filter(function(item) {
  return (item % 2 === 0);
});
console.log(filter);

// find function: verify if item exists in array 
const find = arr.find(function(item) {
  return item === 4;
});
console.log(find);

// ## 7. Arrow functions
// remove the function keyword
// remove parenthesis from the argument, if only one argument
// remove curly brackets and return keyword
const arrowArray = arr.map(item => item * 2);
console.log(arrowArray);

const arrowTest = () => ({name: "Jayme"});
console.log(arrowTest());

// ## 8. Default values

const mysum = (a = 3, b = 6) => a + b;
console.log(mysum(1));
console.log(mysum());

// ## 9. Object destructure

const user = {
  name: "Jayme",
  age: 27,
  address: {
    city: "Porto Alegre",
    neighborhood: "Bom Fim"
  }
}
const { name, age, address: { city } } = user;
console.log(name, age, city);

// instead of this:
// function showName(user): {
//   console.log(user.name);
// };
// showName(user);
// we can do something like:
function showName({ name }) {
  console.log(name);
};
showName(user);

// ## 10. Operators rest/spread
// yarn add @babel/plugin-proposal-object-rest-spread
// add the following line to the .babelrc
// "plugins": ["@babel/plugin-proposal-object-rest-spread"]

// REST: take the rest of the properties
const baboon = {
  kingdom: "Animalia",
  phylum: "Cordata",
  class: "Mammalia",
  order: "Primates"
}
const { order, ...rest } = baboon;
console.log(order);
console.log(rest);

const restArr = [1,2,3,4,5,6];
const [ a, b, ...c  ] = restArr;
console.log(a,b,c);

function yetAnotherSum(...params) {
  return params.reduce((total, next) => total + next);
}
console.log(yetAnotherSum(1,2,3,4,5));

// SPREAD: propagate information to another structure
const arr1 = [1,2,3];
const arr2 = [4,5,6];
const arr3 = [ ...arr1, ...arr2 ];
console.log(arr3);

const newUser = { ...user, name: "John"};
console.log(newUser);

// ## 11. Template Literals

// console.log("My name is " + name + " and I am " + age + " years old");
console.log(`My name is ${name} and I am ${age} years old`)

// ## 12. Object short syntax
const yetAnotherUser = {
  // name: name,
  // instead of the above:
  name,
  age: age,
  company: "Iris"
}
console.log(yetAnotherUser);

// # 2. Webpack Server

// ## 1. Configuring Webpack
// babel and webpack are development dependencies
// so we might change the "dependencies" in package.json file to "devDependencies"
// and install webpack with -D flag as a devDependency
// yarn add webpack webpack-cli -D

// ## 2. Import/export

import { myfunctionsum, myfunctionsubtraction } from "./functions";
import anotherMySum from "./anotherMySum";
console.log(myfunctionsum(99, 105));
console.log(myfunctionsubtraction(16, 11));

// ## 3. Webpack dev server
// create folder src - hold all editable js files - and public - autogenerated noneditable files
// yarn add webpack-dev-server -D
// change the "package.json" to `webpack-dev-server --mode=development`
// the bundle.js file is not generated locally, it exists only in the server
// to generate it, we need to specify a production flag in `webpack --mode=production`


// # 3. Async/await

// ## 1. Async/await
// yarn add @babel/plugin-transform-async-to-generator -D
// yarn add @babel/polyfill -D 

const myPromise = () => new Promise((resolve, reject) => {
  setTimeout(() => { resolve("OK") }, 2000);
})

async function executePromise() {
  console.log(await myPromise());
  console.log(await myPromise());
  console.log(await myPromise());
}

// we can also use an arrow function
const arrowExecutePromise = async () => {
  console.log(await myPromise());
  console.log(await myPromise());
  console.log(await myPromise());
}
arrowExecutePromise();

// ## 2. Axios
// `yarn add axios` it is a production dependency, so no "-D" flag
import axios from "axios";

class Api {
  static async getUserInfo(username) {
    try {
      const response = await axios.get(`https://api.github.com/users/${username}`);
      console.log(response)
    } catch (err) {
      console.warn("API error");
    }
  }
}
Api.getUserInfo("jayme-anchante");

// # 3. Aplicação com ES6+

// # 1. Structure and style
// see index.html

// # 2. Adding repositories

// # 3. Screen rendering

// # 4. Retrieving data from Github API

// # 5. Loading and error

import api from "./api";

class App {
  constructor() {
    this.repositories = [];
    this.formEl = document.getElementById("repo-form");
    this.inputEl = document.querySelector("input[name=repository]");
    this.listEl = document.getElementById("repo-list");
    this.registerHandlers();
  }

  registerHandlers() {
    this.formEl.onsubmit = event => this.addRepository(event);
  }

  setLoading(loading = true) {
    if (loading === true) {
      let loadingEl = document.createElement("span");
      loadingEl.appendChild(document.createTextNode("Loading"));
      loadingEl.setAttribute("id", "loading");
      this.formEl.appendChild(loadingEl);
    } else {
      document.getElementById("loading").remove();
    }
  }

  async addRepository(event) {
    event.preventDefault();

    const repoInput = this.inputEl.value;
    if (repoInput.length === 0) {
      return;
    }

    this.setLoading();

    try {

      const response = await api.get(`/repos/${repoInput}`);

      const { name, description, html_url, owner: { avatar_url } } = response.data;

      this.repositories.push({
        name,
        description,
        avatar_url,
        html_url
      });

      this.inputEl.value = "";

      this.render();
    } catch(error) {
      alert("This repository does not exist!")
    }

    this.setLoading(false);
  }

  render() {
    this.listEl.innerHTML = "";
    this.repositories.forEach(repo => {
      let imgEl = document.createElement("img");
      imgEl.setAttribute("src", repo.avatar_url);

      let titleEl = document.createElement("strong");
      titleEl.appendChild(document.createTextNode(repo.name));

      let descriptionEl = document.createElement("p");
      descriptionEl.appendChild(document.createTextNode(repo.description));

      let linkEl = document.createElement("a");
      linkEl.setAttribute("target", "_blank");
      linkEl.setAttribute("href", repo.html_url);
      linkEl.appendChild(document.createTextNode("Access"));

      let listItemEl = document.createElement("li");
      listItemEl.appendChild(imgEl);
      listItemEl.appendChild(titleEl);
      listItemEl.appendChild(descriptionEl);
      listItemEl.appendChild(linkEl);

      this.listEl.appendChild(listItemEl);
    })
  }
}

new App();